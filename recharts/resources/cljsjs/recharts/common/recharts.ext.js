/**********************************************************************
 * Extern for Recharts
 * Generated by http://jmmk.github.io/javascript-externs-generator
 * Loaded JavaScripts:
 * https://unpkg.com/react@17.0.1/umd/react.development.js
 * https://unpkg.com/react-dom@17.0.1/umd/react-dom.development.js
 * https://unpkg.com/react-transition-group@2.2.1/dist/react-transition-group.min.js
 * https://unpkg.com/prop-types@15.7.2/prop-types.min.js
 * https://unpkg.com/recharts@2.0.8/umd/Recharts.min.js
 **********************************************************************/

 /**********************************************************************
 * Extern for React
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var React = {
  "Children": {
    "count": function () {},
    "forEach": function () {},
    "map": function () {},
    "only": function () {},
    "toArray": function () {}
  },
  "Component": function () {},
  "Fragment": {},
  "Profiler": {},
  "PureComponent": function () {},
  "StrictMode": {},
  "Suspense": {},
  "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": {
    "IsSomeRendererActing": {
      "current": {}
    },
    "ReactCurrentBatchConfig": {
      "transition": {}
    },
    "ReactCurrentDispatcher": {
      "current": {}
    },
    "ReactCurrentOwner": {
      "current": {}
    },
    "ReactDebugCurrentFrame": {
      "getCurrentStack": {},
      "getStackAddendum": function () {},
      "setExtraStackFrame": function () {}
    },
    "Scheduler": {
      "unstable_IdlePriority": {},
      "unstable_ImmediatePriority": {},
      "unstable_LowPriority": {},
      "unstable_NormalPriority": {},
      "unstable_Profiling": {
        "sharedProfilingBuffer": {},
        "startLoggingProfilingEvents": function () {},
        "stopLoggingProfilingEvents": function () {}
      },
      "unstable_UserBlockingPriority": {},
      "unstable_cancelCallback": function () {},
      "unstable_continueExecution": function () {},
      "unstable_forceFrameRate": function () {},
      "unstable_getCurrentPriorityLevel": function () {},
      "unstable_getFirstCallbackNode": function () {},
      "unstable_next": function () {},
      "unstable_now": function () {},
      "unstable_pauseExecution": function () {},
      "unstable_requestPaint": function () {},
      "unstable_runWithPriority": function () {},
      "unstable_scheduleCallback": function () {},
      "unstable_shouldYield": function () {},
      "unstable_wrapCallback": function () {}
    },
    "SchedulerTracing": {
      "__interactionsRef": {
        "current": {}
      },
      "__subscriberRef": {
        "current": {}
      },
      "unstable_clear": function () {},
      "unstable_getCurrent": function () {},
      "unstable_getThreadID": function () {},
      "unstable_subscribe": function () {},
      "unstable_trace": function () {},
      "unstable_unsubscribe": function () {},
      "unstable_wrap": function () {}
    },
    "assign": function () {}
  },
  "cloneElement": function () {},
  "createContext": function () {},
  "createElement": function () {},
  "createFactory": function () {},
  "createRef": function () {},
  "forwardRef": function () {},
  "isValidElement": function () {},
  "lazy": function () {},
  "memo": function () {},
  "useCallback": function () {},
  "useContext": function () {},
  "useDebugValue": function () {},
  "useEffect": function () {},
  "useImperativeHandle": function () {},
  "useLayoutEffect": function () {},
  "useMemo": function () {},
  "useReducer": function () {},
  "useRef": function () {},
  "useState": function () {},
  "version": {}
};
React.Component.prototype = {
  "forceUpdate": function () {},
  "isReactComponent": function () {},
  "setState": function () {}
};
React.PureComponent.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "setState": function () {}
};
/**********************************************************************
 * End Generated Extern for React
/**********************************************************************/
/**********************************************************************
 * Extern for ReactDOM
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var ReactDOM = {
  "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": {
    "Events": {}
  },
  "createPortal": function () {},
  "findDOMNode": function () {},
  "flushSync": function () {},
  "hydrate": function () {},
  "render": function () {},
  "unmountComponentAtNode": function () {},
  "unstable_batchedUpdates": function () {},
  "unstable_createPortal": function () {},
  "unstable_renderSubtreeIntoContainer": function () {},
  "version": {}
};
/**********************************************************************
 * End Generated Extern for ReactDOM
/**********************************************************************/
/**********************************************************************
 * Extern for PropTypes
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var PropTypes = {
  "PropTypes": {
    "PropTypes": {},
    "any": {
      "isRequired": function () {}
    },
    "array": {
      "isRequired": function () {}
    },
    "arrayOf": function () {},
    "bool": {
      "isRequired": function () {}
    },
    "checkPropTypes": {
      "resetWarningCache": function () {}
    },
    "element": {
      "isRequired": function () {}
    },
    "elementType": {
      "isRequired": function () {}
    },
    "exact": function () {},
    "func": {
      "isRequired": function () {}
    },
    "instanceOf": function () {},
    "node": {
      "isRequired": function () {}
    },
    "number": {
      "isRequired": function () {}
    },
    "object": {
      "isRequired": function () {}
    },
    "objectOf": function () {},
    "oneOf": function () {},
    "oneOfType": function () {},
    "resetWarningCache": function () {},
    "shape": function () {},
    "string": {
      "isRequired": function () {}
    },
    "symbol": {
      "isRequired": function () {}
    }
  },
  "any": {
    "isRequired": function () {}
  },
  "array": {
    "isRequired": function () {}
  },
  "arrayOf": function () {},
  "bool": {
    "isRequired": function () {}
  },
  "checkPropTypes": {
    "resetWarningCache": function () {}
  },
  "element": {
    "isRequired": function () {}
  },
  "elementType": {
    "isRequired": function () {}
  },
  "exact": function () {},
  "func": {
    "isRequired": function () {}
  },
  "instanceOf": function () {},
  "node": {
    "isRequired": function () {}
  },
  "number": {
    "isRequired": function () {}
  },
  "object": {
    "isRequired": function () {}
  },
  "objectOf": function () {},
  "oneOf": function () {},
  "oneOfType": function () {},
  "resetWarningCache": function () {},
  "shape": function () {},
  "string": {
    "isRequired": function () {}
  },
  "symbol": {
    "isRequired": function () {}
  }
};
/**********************************************************************
 * End Generated Extern for PropTypes
/**********************************************************************/
/**********************************************************************
 * Extern for Recharts
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var Recharts = {
  "Area": {
    "defaultProps": {
      "activeDot": {},
      "animationBegin": {},
      "animationDuration": {},
      "animationEasing": {},
      "connectNulls": {},
      "dot": {},
      "fill": {},
      "fillOpacity": {},
      "hide": {},
      "isAnimationActive": {},
      "legendType": {},
      "points": {},
      "stroke": {},
      "xAxisId": {},
      "yAxisId": {}
    },
    "displayName": {},
    "getBaseValue": function () {},
    "getComposedData": function () {},
    "getDerivedStateFromProps": function () {},
    "renderDotItem": function () {}
  },
  "AreaChart": {
    "defaultProps": {
      "barCategoryGap": {},
      "barGap": {},
      "layout": {},
      "margin": {
        "bottom": {},
        "left": {},
        "right": {},
        "top": {}
      },
      "reverseStackOrder": {},
      "stackOffset": {},
      "syncMethod": {}
    },
    "displayName": {},
    "getDerivedStateFromProps": function () {},
    "renderActiveDot": function () {}
  },
  "Bar": {
    "defaultProps": {
      "animationBegin": {},
      "animationDuration": {},
      "animationEasing": {},
      "data": {},
      "hide": {},
      "isAnimationActive": {},
      "layout": {},
      "legendType": {},
      "minPointSize": {},
      "xAxisId": {},
      "yAxisId": {}
    },
    "displayName": {},
    "getComposedData": function () {},
    "getDerivedStateFromProps": function () {},
    "renderRectangle": function () {}
  },
  "BarChart": {
    "defaultProps": {
      "barCategoryGap": {},
      "barGap": {},
      "layout": {},
      "margin": {
        "bottom": {},
        "left": {},
        "right": {},
        "top": {}
      },
      "reverseStackOrder": {},
      "stackOffset": {},
      "syncMethod": {}
    },
    "displayName": {},
    "getDerivedStateFromProps": function () {},
    "renderActiveDot": function () {}
  },
  "Brush": {
    "defaultProps": {
      "alwaysShowText": {},
      "fill": {},
      "gap": {},
      "height": {},
      "leaveTimeOut": {},
      "padding": {
        "bottom": {},
        "left": {},
        "right": {},
        "top": {}
      },
      "stroke": {},
      "travellerWidth": {}
    },
    "displayName": {},
    "getDerivedStateFromProps": function () {},
    "getIndexInRange": function () {},
    "renderDefaultTraveller": function () {},
    "renderTraveller": function () {}
  },
  "CartesianAxis": {
    "defaultProps": {
      "axisLine": {},
      "height": {},
      "interval": {},
      "minTickGap": {},
      "mirror": {},
      "orientation": {},
      "stroke": {},
      "tick": {},
      "tickLine": {},
      "tickMargin": {},
      "tickSize": {},
      "ticks": {},
      "viewBox": {
        "height": {},
        "width": {},
        "x": {},
        "y": {}
      },
      "width": {},
      "x": {},
      "y": {}
    },
    "displayName": {},
    "getNumberIntervalTicks": function () {},
    "getTicks": function () {},
    "getTicksEnd": function () {},
    "getTicksStart": function () {},
    "renderTickItem": function () {}
  },
  "CartesianGrid": {
    "defaultProps": {
      "fill": {},
      "horizontal": {},
      "horizontalFill": {},
      "horizontalPoints": {},
      "stroke": {},
      "vertical": {},
      "verticalFill": {},
      "verticalPoints": {}
    },
    "displayName": {},
    "renderLineItem": function () {}
  },
  "Cell": {
    "displayName": {}
  },
  "ComposedChart": {
    "defaultProps": {
      "barCategoryGap": {},
      "barGap": {},
      "layout": {},
      "margin": {
        "bottom": {},
        "left": {},
        "right": {},
        "top": {}
      },
      "reverseStackOrder": {},
      "stackOffset": {},
      "syncMethod": {}
    },
    "displayName": {},
    "getDerivedStateFromProps": function () {},
    "renderActiveDot": function () {}
  },
  "Cross": {
    "defaultProps": {
      "height": {},
      "left": {},
      "top": {},
      "width": {},
      "x": {},
      "y": {}
    },
    "getPath": function () {}
  },
  "Curve": {
    "defaultProps": {
      "connectNulls": {},
      "points": {},
      "type": {}
    }
  },
  "Customized": {
    "displayName": {}
  },
  "Dot": function () {},
  "ErrorBar": {
    "defaultProps": {
      "layout": {},
      "offset": {},
      "stroke": {},
      "strokeWidth": {},
      "width": {}
    },
    "displayName": {}
  },
  "Funnel": {
    "defaultProps": {
      "animationBegin": {},
      "animationDuration": {},
      "animationEasing": {},
      "fill": {},
      "hide": {},
      "isAnimationActive": {},
      "labelLine": {},
      "lastShapeType": {},
      "legendType": {},
      "nameKey": {},
      "stroke": {}
    },
    "displayName": {},
    "getComposedData": function () {},
    "getDerivedStateFromProps": function () {},
    "getRealFunnelData": function () {},
    "getRealWidthHeight": function () {},
    "renderTrapezoidItem": function () {}
  },
  "FunnelChart": {
    "defaultProps": {
      "barCategoryGap": {},
      "barGap": {},
      "layout": {},
      "margin": {
        "bottom": {},
        "left": {},
        "right": {},
        "top": {}
      },
      "reverseStackOrder": {},
      "stackOffset": {},
      "syncMethod": {}
    },
    "displayName": {},
    "getDerivedStateFromProps": function () {},
    "renderActiveDot": function () {}
  },
  "Global": {
    "get": function () {},
    "isSsr": {},
    "set": function () {}
  },
  "Label": {
    "defaultProps": {
      "offset": {}
    },
    "displayName": {},
    "parseViewBox": function () {},
    "renderCallByParent": function () {}
  },
  "LabelList": {
    "defaultProps": {
      "valueAccessor": function () {}
    },
    "displayName": {},
    "renderCallByParent": function () {}
  },
  "Layer": function () {},
  "Legend": {
    "defaultProps": {
      "align": {},
      "iconSize": {},
      "layout": {},
      "verticalAlign": {}
    },
    "displayName": {},
    "getWithHeight": function () {}
  },
  "Line": {
    "defaultProps": {
      "activeDot": {},
      "animateNewValues": {},
      "animationBegin": {},
      "animationDuration": {},
      "animationEasing": {},
      "connectNulls": {},
      "dot": {},
      "fill": {},
      "hide": {},
      "isAnimationActive": {},
      "legendType": {},
      "points": {},
      "stroke": {},
      "strokeWidth": {},
      "xAxisId": {},
      "yAxisId": {}
    },
    "displayName": {},
    "getComposedData": function () {},
    "getDerivedStateFromProps": function () {},
    "renderDotItem": function () {},
    "repeat": function () {}
  },
  "LineChart": {
    "defaultProps": {
      "barCategoryGap": {},
      "barGap": {},
      "layout": {},
      "margin": {
        "bottom": {},
        "left": {},
        "right": {},
        "top": {}
      },
      "reverseStackOrder": {},
      "stackOffset": {},
      "syncMethod": {}
    },
    "displayName": {},
    "getDerivedStateFromProps": function () {},
    "renderActiveDot": function () {}
  },
  "Pie": {
    "defaultProps": {
      "animationBegin": {},
      "animationDuration": {},
      "animationEasing": {},
      "blendStroke": {},
      "cx": {},
      "cy": {},
      "endAngle": {},
      "fill": {},
      "hide": {},
      "innerRadius": {},
      "isAnimationActive": {},
      "labelLine": {},
      "legendType": {},
      "minAngle": {},
      "nameKey": {},
      "outerRadius": {},
      "paddingAngle": {},
      "startAngle": {},
      "stroke": {}
    },
    "displayName": {},
    "getComposedData": function () {},
    "getDerivedStateFromProps": function () {},
    "getRealPieData": function () {},
    "getTextAnchor": function () {},
    "parseCoordinateOfPie": function () {},
    "parseDeltaAngle": function () {},
    "renderLabelItem": function () {},
    "renderLabelLineItem": function () {},
    "renderSectorItem": function () {}
  },
  "PieChart": {
    "defaultProps": {
      "barCategoryGap": {},
      "barGap": {},
      "cx": {},
      "cy": {},
      "endAngle": {},
      "innerRadius": {},
      "layout": {},
      "margin": {
        "bottom": {},
        "left": {},
        "right": {},
        "top": {}
      },
      "outerRadius": {},
      "reverseStackOrder": {},
      "stackOffset": {},
      "startAngle": {},
      "syncMethod": {}
    },
    "displayName": {},
    "getDerivedStateFromProps": function () {},
    "renderActiveDot": function () {}
  },
  "PolarAngleAxis": {
    "axisType": {},
    "defaultProps": {
      "allowDuplicatedCategory": {},
      "angleAxisId": {},
      "axisLine": {},
      "cx": {},
      "cy": {},
      "domain": {},
      "hide": {},
      "orientation": {},
      "scale": {},
      "tick": {},
      "tickLine": {},
      "tickSize": {},
      "type": {}
    },
    "displayName": {},
    "renderTickItem": function () {}
  },
  "PolarGrid": {
    "defaultProps": {
      "cx": {},
      "cy": {},
      "gridType": {},
      "innerRadius": {},
      "outerRadius": {},
      "radialLines": {}
    },
    "displayName": {}
  },
  "PolarRadiusAxis": {
    "axisType": {},
    "defaultProps": {
      "allowDataOverflow": {},
      "allowDuplicatedCategory": {},
      "angle": {},
      "axisLine": {},
      "cx": {},
      "cy": {},
      "domain": {},
      "orientation": {},
      "radiusAxisId": {},
      "scale": {},
      "stroke": {},
      "tick": {},
      "tickCount": {},
      "type": {}
    },
    "displayName": {},
    "renderTickItem": function () {}
  },
  "Polygon": function () {},
  "Radar": {
    "defaultProps": {
      "activeDot": {},
      "angleAxisId": {},
      "animationBegin": {},
      "animationDuration": {},
      "animationEasing": {},
      "dot": {},
      "hide": {},
      "isAnimationActive": {},
      "legendType": {},
      "radiusAxisId": {}
    },
    "displayName": {},
    "getComposedData": function () {},
    "getDerivedStateFromProps": function () {},
    "renderDotItem": function () {}
  },
  "RadarChart": {
    "defaultProps": {
      "barCategoryGap": {},
      "barGap": {},
      "cx": {},
      "cy": {},
      "endAngle": {},
      "innerRadius": {},
      "layout": {},
      "margin": {
        "bottom": {},
        "left": {},
        "right": {},
        "top": {}
      },
      "outerRadius": {},
      "reverseStackOrder": {},
      "stackOffset": {},
      "startAngle": {},
      "syncMethod": {}
    },
    "displayName": {},
    "getDerivedStateFromProps": function () {},
    "renderActiveDot": function () {}
  },
  "RadialBar": {
    "defaultProps": {
      "angleAxisId": {},
      "animationBegin": {},
      "animationDuration": {},
      "animationEasing": {},
      "cornerIsExternal": {},
      "data": {},
      "forceCornerRadius": {},
      "hide": {},
      "isAnimationActive": {},
      "legendType": {},
      "minPointSize": {},
      "radiusAxisId": {}
    },
    "displayName": {},
    "getComposedData": function () {},
    "getDerivedStateFromProps": function () {},
    "renderSectorShape": function () {}
  },
  "RadialBarChart": {
    "defaultProps": {
      "barCategoryGap": {},
      "barGap": {},
      "cx": {},
      "cy": {},
      "endAngle": {},
      "innerRadius": {},
      "layout": {},
      "margin": {
        "bottom": {},
        "left": {},
        "right": {},
        "top": {}
      },
      "outerRadius": {},
      "reverseStackOrder": {},
      "stackOffset": {},
      "startAngle": {},
      "syncMethod": {}
    },
    "displayName": {},
    "getDerivedStateFromProps": function () {},
    "renderActiveDot": function () {}
  },
  "Rectangle": {
    "defaultProps": {
      "animationBegin": {},
      "animationDuration": {},
      "animationEasing": {},
      "height": {},
      "isAnimationActive": {},
      "isUpdateAnimationActive": {},
      "radius": {},
      "width": {},
      "x": {},
      "y": {}
    }
  },
  "ReferenceArea": {
    "defaultProps": {
      "fill": {},
      "fillOpacity": {},
      "ifOverflow": {},
      "isFront": {},
      "r": {},
      "stroke": {},
      "strokeWidth": {},
      "xAxisId": {},
      "yAxisId": {}
    },
    "displayName": {},
    "renderRect": function () {}
  },
  "ReferenceDot": {
    "defaultProps": {
      "fill": {},
      "fillOpacity": {},
      "ifOverflow": {},
      "isFront": {},
      "r": {},
      "stroke": {},
      "strokeWidth": {},
      "xAxisId": {},
      "yAxisId": {}
    },
    "displayName": {},
    "renderDot": function () {}
  },
  "ReferenceLine": {
    "defaultProps": {
      "fill": {},
      "fillOpacity": {},
      "ifOverflow": {},
      "isFront": {},
      "position": {},
      "stroke": {},
      "strokeWidth": {},
      "xAxisId": {},
      "yAxisId": {}
    },
    "displayName": {}
  },
  "ResponsiveContainer": {
    "defaultProps": {
      "debounce": {},
      "height": {},
      "width": {}
    }
  },
  "Sankey": {
    "defaultProps": {
      "dataKey": {},
      "iterations": {},
      "linkCurvature": {},
      "margin": {
        "bottom": {},
        "left": {},
        "right": {},
        "top": {}
      },
      "nameKey": {},
      "nodePadding": {},
      "nodeWidth": {}
    },
    "displayName": {},
    "getDerivedStateFromProps": function () {},
    "renderLinkItem": function () {},
    "renderNodeItem": function () {}
  },
  "Scatter": {
    "defaultProps": {
      "animationBegin": {},
      "animationDuration": {},
      "animationEasing": {},
      "data": {},
      "hide": {},
      "isAnimationActive": {},
      "legendType": {},
      "lineJointType": {},
      "lineType": {},
      "shape": {},
      "xAxisId": {},
      "yAxisId": {},
      "zAxisId": {}
    },
    "displayName": {},
    "getComposedData": function () {},
    "getDerivedStateFromProps": function () {},
    "renderSymbolItem": function () {}
  },
  "ScatterChart": {
    "defaultProps": {
      "barCategoryGap": {},
      "barGap": {},
      "layout": {},
      "margin": {
        "bottom": {},
        "left": {},
        "right": {},
        "top": {}
      },
      "reverseStackOrder": {},
      "stackOffset": {},
      "syncMethod": {}
    },
    "displayName": {},
    "getDerivedStateFromProps": function () {},
    "renderActiveDot": function () {}
  },
  "Sector": {
    "defaultProps": {
      "cornerIsExternal": {},
      "cornerRadius": {},
      "cx": {},
      "cy": {},
      "endAngle": {},
      "forceCornerRadius": {},
      "innerRadius": {},
      "outerRadius": {},
      "startAngle": {}
    }
  },
  "Surface": function () {},
  "Symbols": {
    "defaultProps": {
      "size": {},
      "sizeType": {},
      "type": {}
    },
    "registerSymbol": function () {}
  },
  "Text": {
    "defaultProps": {
      "capHeight": {},
      "lineHeight": {},
      "scaleToFit": {},
      "textAnchor": {},
      "verticalAnchor": {},
      "x": {},
      "y": {}
    },
    "getDerivedStateFromProps": function () {}
  },
  "Tooltip": {
    "defaultProps": {
      "active": {},
      "allowEscapeViewBox": {
        "x": {},
        "y": {}
      },
      "animationDuration": {},
      "animationEasing": {},
      "contentStyle": {},
      "coordinate": {
        "x": {},
        "y": {}
      },
      "cursor": {},
      "cursorStyle": {},
      "filterNull": {},
      "isAnimationActive": {},
      "itemStyle": {},
      "labelStyle": {},
      "offset": {},
      "separator": {},
      "trigger": {},
      "useTranslate3d": {},
      "viewBox": {
        "x1": {},
        "x2": {},
        "y1": {},
        "y2": {}
      },
      "wrapperStyle": {}
    },
    "displayName": {}
  },
  "Trapezoid": {
    "defaultProps": {
      "animationBegin": {},
      "animationDuration": {},
      "animationEasing": {},
      "height": {},
      "isUpdateAnimationActive": {},
      "lowerWidth": {},
      "upperWidth": {},
      "x": {},
      "y": {}
    }
  },
  "Treemap": {
    "defaultProps": {
      "animationBegin": {},
      "animationDuration": {},
      "animationEasing": {},
      "aspectRatio": {},
      "dataKey": {},
      "isAnimationActive": {},
      "isUpdateAnimationActive": {},
      "type": {}
    },
    "displayName": {},
    "getDerivedStateFromProps": function () {},
    "renderContentItem": function () {}
  },
  "XAxis": {
    "defaultProps": {
      "allowDataOverflow": {},
      "allowDecimals": {},
      "allowDuplicatedCategory": {},
      "domain": {},
      "height": {},
      "hide": {},
      "mirror": {},
      "orientation": {},
      "padding": {
        "left": {},
        "right": {}
      },
      "reversed": {},
      "scale": {},
      "tickCount": {},
      "type": {},
      "width": {},
      "xAxisId": {}
    },
    "displayName": {}
  },
  "YAxis": {
    "defaultProps": {
      "allowDataOverflow": {},
      "allowDecimals": {},
      "allowDuplicatedCategory": {},
      "domain": {},
      "height": {},
      "hide": {},
      "mirror": {},
      "orientation": {},
      "padding": {
        "bottom": {},
        "top": {}
      },
      "reversed": {},
      "scale": {},
      "tickCount": {},
      "type": {},
      "width": {},
      "yAxisId": {}
    },
    "displayName": {}
  },
  "ZAxis": {
    "defaultProps": {
      "range": {},
      "scale": {},
      "type": {},
      "zAxisId": {}
    },
    "displayName": {}
  }
};
Recharts.Area.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderArea": function () {},
  "renderAreaStatically": function () {},
  "renderAreaWithAnimation": function () {},
  "renderClipRect": function () {},
  "renderDots": function () {},
  "renderHorizontalRect": function () {},
  "renderVerticalRect": function () {},
  "setState": function () {}
};
Recharts.AreaChart.prototype = {
  "addListener": function () {},
  "applySyncEvent": function () {},
  "cancelThrottledTriggerAfterMouseMove": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "constructor": function () {},
  "filterFormatItem": function () {},
  "forceUpdate": function () {},
  "getCursorPoints": function () {},
  "getCursorRectangle": function () {},
  "getItemByXY": function () {},
  "getMouseInfo": function () {},
  "getTooltipEventType": function () {},
  "getXScaleByAxisId": function () {},
  "getXScales": function () {},
  "getYScaleByAxisId": function () {},
  "getYScales": function () {},
  "inRange": function () {},
  "isReactComponent": function () {},
  "parseEventsOfWrapper": function () {},
  "removeListener": function () {},
  "render": function () {},
  "renderAxis": function () {},
  "renderClipPath": function () {},
  "setState": function () {},
  "triggerSyncEvent": function () {}
};
Recharts.Bar.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderBackground": function () {},
  "renderErrorBar": function () {},
  "renderRectangles": function () {},
  "renderRectanglesStatically": function () {},
  "renderRectanglesWithAnimation": function () {},
  "setState": function () {}
};
Recharts.BarChart.prototype = {
  "addListener": function () {},
  "applySyncEvent": function () {},
  "cancelThrottledTriggerAfterMouseMove": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "constructor": function () {},
  "filterFormatItem": function () {},
  "forceUpdate": function () {},
  "getCursorPoints": function () {},
  "getCursorRectangle": function () {},
  "getItemByXY": function () {},
  "getMouseInfo": function () {},
  "getTooltipEventType": function () {},
  "getXScaleByAxisId": function () {},
  "getXScales": function () {},
  "getYScaleByAxisId": function () {},
  "getYScales": function () {},
  "inRange": function () {},
  "isReactComponent": function () {},
  "parseEventsOfWrapper": function () {},
  "removeListener": function () {},
  "render": function () {},
  "renderAxis": function () {},
  "renderClipPath": function () {},
  "setState": function () {},
  "triggerSyncEvent": function () {}
};
Recharts.Brush.prototype = {
  "attachDragEndListener": function () {},
  "componentWillUnmount": function () {},
  "constructor": function () {},
  "detachDragEndListener": function () {},
  "forceUpdate": function () {},
  "getIndex": function () {},
  "getTextOfTick": function () {},
  "handleSlideDrag": function () {},
  "handleTravellerDragStart": function () {},
  "handleTravellerMove": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderBackground": function () {},
  "renderPanorama": function () {},
  "renderSlide": function () {},
  "renderText": function () {},
  "renderTravellerLayer": function () {},
  "setState": function () {}
};
Recharts.CartesianAxis.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "getTickLineCoord": function () {},
  "getTickTextAnchor": function () {},
  "getTickVerticalAnchor": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderAxisLine": function () {},
  "renderTicks": function () {},
  "setState": function () {},
  "shouldComponentUpdate": function () {}
};
Recharts.CartesianGrid.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderBackground": function () {},
  "renderHorizontal": function () {},
  "renderHorizontalStripes": function () {},
  "renderVertical": function () {},
  "renderVerticalStripes": function () {},
  "setState": function () {}
};
Recharts.ComposedChart.prototype = {
  "addListener": function () {},
  "applySyncEvent": function () {},
  "cancelThrottledTriggerAfterMouseMove": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "constructor": function () {},
  "filterFormatItem": function () {},
  "forceUpdate": function () {},
  "getCursorPoints": function () {},
  "getCursorRectangle": function () {},
  "getItemByXY": function () {},
  "getMouseInfo": function () {},
  "getTooltipEventType": function () {},
  "getXScaleByAxisId": function () {},
  "getXScales": function () {},
  "getYScaleByAxisId": function () {},
  "getYScales": function () {},
  "inRange": function () {},
  "isReactComponent": function () {},
  "parseEventsOfWrapper": function () {},
  "removeListener": function () {},
  "render": function () {},
  "renderAxis": function () {},
  "renderClipPath": function () {},
  "setState": function () {},
  "triggerSyncEvent": function () {}
};
Recharts.Cross.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {}
};
Recharts.Curve.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "getPath": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {}
};
Recharts.Dot.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {}
};
Recharts.Funnel.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isActiveIndex": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderTrapezoids": function () {},
  "renderTrapezoidsStatically": function () {},
  "renderTrapezoidsWithAnimation": function () {},
  "setState": function () {}
};
Recharts.FunnelChart.prototype = {
  "addListener": function () {},
  "applySyncEvent": function () {},
  "cancelThrottledTriggerAfterMouseMove": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "constructor": function () {},
  "filterFormatItem": function () {},
  "forceUpdate": function () {},
  "getCursorPoints": function () {},
  "getCursorRectangle": function () {},
  "getItemByXY": function () {},
  "getMouseInfo": function () {},
  "getTooltipEventType": function () {},
  "getXScaleByAxisId": function () {},
  "getXScales": function () {},
  "getYScaleByAxisId": function () {},
  "getYScales": function () {},
  "inRange": function () {},
  "isReactComponent": function () {},
  "parseEventsOfWrapper": function () {},
  "removeListener": function () {},
  "render": function () {},
  "renderAxis": function () {},
  "renderClipPath": function () {},
  "setState": function () {},
  "triggerSyncEvent": function () {}
};
Recharts.Legend.prototype = {
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "constructor": function () {},
  "forceUpdate": function () {},
  "getBBox": function () {},
  "getBBoxSnapshot": function () {},
  "getDefaultPosition": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {},
  "updateBBox": function () {}
};
Recharts.Line.prototype = {
  "componentDidMount": function () {},
  "constructor": function () {},
  "forceUpdate": function () {},
  "getTotalLength": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderCurve": function () {},
  "renderCurveStatically": function () {},
  "renderCurveWithAnimation": function () {},
  "renderDots": function () {},
  "renderErrorBar": function () {},
  "setState": function () {}
};
Recharts.LineChart.prototype = {
  "addListener": function () {},
  "applySyncEvent": function () {},
  "cancelThrottledTriggerAfterMouseMove": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "constructor": function () {},
  "filterFormatItem": function () {},
  "forceUpdate": function () {},
  "getCursorPoints": function () {},
  "getCursorRectangle": function () {},
  "getItemByXY": function () {},
  "getMouseInfo": function () {},
  "getTooltipEventType": function () {},
  "getXScaleByAxisId": function () {},
  "getXScales": function () {},
  "getYScaleByAxisId": function () {},
  "getYScales": function () {},
  "inRange": function () {},
  "isReactComponent": function () {},
  "parseEventsOfWrapper": function () {},
  "removeListener": function () {},
  "render": function () {},
  "renderAxis": function () {},
  "renderClipPath": function () {},
  "setState": function () {},
  "triggerSyncEvent": function () {}
};
Recharts.Pie.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isActiveIndex": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderLabels": function () {},
  "renderSectors": function () {},
  "renderSectorsStatically": function () {},
  "renderSectorsWithAnimation": function () {},
  "setState": function () {}
};
Recharts.PieChart.prototype = {
  "addListener": function () {},
  "applySyncEvent": function () {},
  "cancelThrottledTriggerAfterMouseMove": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "constructor": function () {},
  "filterFormatItem": function () {},
  "forceUpdate": function () {},
  "getCursorPoints": function () {},
  "getCursorRectangle": function () {},
  "getItemByXY": function () {},
  "getMouseInfo": function () {},
  "getTooltipEventType": function () {},
  "getXScaleByAxisId": function () {},
  "getXScales": function () {},
  "getYScaleByAxisId": function () {},
  "getYScales": function () {},
  "inRange": function () {},
  "isReactComponent": function () {},
  "parseEventsOfWrapper": function () {},
  "removeListener": function () {},
  "render": function () {},
  "renderAxis": function () {},
  "renderClipPath": function () {},
  "setState": function () {},
  "triggerSyncEvent": function () {}
};
Recharts.PolarAngleAxis.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "getTickLineCoord": function () {},
  "getTickTextAnchor": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderAxisLine": function () {},
  "renderTicks": function () {},
  "setState": function () {}
};
Recharts.PolarGrid.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "getPolygonPath": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderConcentricCircle": function () {},
  "renderConcentricPath": function () {},
  "renderConcentricPolygon": function () {},
  "renderPolarAngles": function () {},
  "setState": function () {}
};
Recharts.PolarRadiusAxis.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "getTickTextAnchor": function () {},
  "getTickValueCoord": function () {},
  "getViewBox": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderAxisLine": function () {},
  "renderTicks": function () {},
  "setState": function () {}
};
Recharts.Polygon.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {}
};
Recharts.Radar.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderDots": function () {},
  "renderPolygon": function () {},
  "renderPolygonStatically": function () {},
  "renderPolygonWithAnimation": function () {},
  "setState": function () {}
};
Recharts.RadarChart.prototype = {
  "addListener": function () {},
  "applySyncEvent": function () {},
  "cancelThrottledTriggerAfterMouseMove": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "constructor": function () {},
  "filterFormatItem": function () {},
  "forceUpdate": function () {},
  "getCursorPoints": function () {},
  "getCursorRectangle": function () {},
  "getItemByXY": function () {},
  "getMouseInfo": function () {},
  "getTooltipEventType": function () {},
  "getXScaleByAxisId": function () {},
  "getXScales": function () {},
  "getYScaleByAxisId": function () {},
  "getYScales": function () {},
  "inRange": function () {},
  "isReactComponent": function () {},
  "parseEventsOfWrapper": function () {},
  "removeListener": function () {},
  "render": function () {},
  "renderAxis": function () {},
  "renderClipPath": function () {},
  "setState": function () {},
  "triggerSyncEvent": function () {}
};
Recharts.RadialBar.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "getDeltaAngle": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderBackground": function () {},
  "renderSectors": function () {},
  "renderSectorsStatically": function () {},
  "renderSectorsWithAnimation": function () {},
  "setState": function () {}
};
Recharts.RadialBarChart.prototype = {
  "addListener": function () {},
  "applySyncEvent": function () {},
  "cancelThrottledTriggerAfterMouseMove": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "constructor": function () {},
  "filterFormatItem": function () {},
  "forceUpdate": function () {},
  "getCursorPoints": function () {},
  "getCursorRectangle": function () {},
  "getItemByXY": function () {},
  "getMouseInfo": function () {},
  "getTooltipEventType": function () {},
  "getXScaleByAxisId": function () {},
  "getXScales": function () {},
  "getYScaleByAxisId": function () {},
  "getYScales": function () {},
  "inRange": function () {},
  "isReactComponent": function () {},
  "parseEventsOfWrapper": function () {},
  "removeListener": function () {},
  "render": function () {},
  "renderAxis": function () {},
  "renderClipPath": function () {},
  "setState": function () {},
  "triggerSyncEvent": function () {}
};
Recharts.Rectangle.prototype = {
  "componentDidMount": function () {},
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {}
};
Recharts.ResponsiveContainer.prototype = {
  "componentDidMount": function () {},
  "componentWillUnmount": function () {},
  "constructor": function () {},
  "forceUpdate": function () {},
  "getContainerSize": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderChart": function () {},
  "setState": function () {}
};
Recharts.Sankey.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "handleClick": function () {},
  "handleMouseEnter": function () {},
  "handleMouseLeave": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderLinks": function () {},
  "renderNodes": function () {},
  "renderTooltip": function () {},
  "setState": function () {}
};
Recharts.Scatter.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderErrorBar": function () {},
  "renderLine": function () {},
  "renderSymbols": function () {},
  "renderSymbolsStatically": function () {},
  "renderSymbolsWithAnimation": function () {},
  "setState": function () {}
};
Recharts.ScatterChart.prototype = {
  "addListener": function () {},
  "applySyncEvent": function () {},
  "cancelThrottledTriggerAfterMouseMove": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "constructor": function () {},
  "filterFormatItem": function () {},
  "forceUpdate": function () {},
  "getCursorPoints": function () {},
  "getCursorRectangle": function () {},
  "getItemByXY": function () {},
  "getMouseInfo": function () {},
  "getTooltipEventType": function () {},
  "getXScaleByAxisId": function () {},
  "getXScales": function () {},
  "getYScaleByAxisId": function () {},
  "getYScales": function () {},
  "inRange": function () {},
  "isReactComponent": function () {},
  "parseEventsOfWrapper": function () {},
  "removeListener": function () {},
  "render": function () {},
  "renderAxis": function () {},
  "renderClipPath": function () {},
  "setState": function () {},
  "triggerSyncEvent": function () {}
};
Recharts.Sector.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {}
};
Recharts.Symbols.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "getPath": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {}
};
Recharts.Text.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {}
};
Recharts.Tooltip.prototype = {
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {},
  "updateBBox": function () {}
};
Recharts.Trapezoid.prototype = {
  "componentDidMount": function () {},
  "constructor": function () {},
  "forceUpdate": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {}
};
Recharts.Treemap.prototype = {
  "constructor": function () {},
  "forceUpdate": function () {},
  "handleClick": function () {},
  "handleMouseEnter": function () {},
  "handleMouseLeave": function () {},
  "handleNestIndex": function () {},
  "isPureReactComponent": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "renderAllNodes": function () {},
  "renderItem": function () {},
  "renderNestIndex": function () {},
  "renderNode": function () {},
  "renderTooltip": function () {},
  "setState": function () {}
};
/**********************************************************************
 * End Generated Extern for Recharts
/**********************************************************************/
